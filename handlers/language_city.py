from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from keyboards import language_keyboard
from loader import bot

class LanguageCity(StatesGroup):
    choosing_language = State()
    entering_city = State()

@bot.message_handler(commands=['start'], state="*")
async def start_language_choice(message: types.Message, state: FSMContext):
    await state.finish()  # —Å–∫–∏–Ω—É—Ç–∏ –≤—Å—ñ —Å—Ç–∞–Ω–∏, —â–æ–± –Ω–µ –±—É–ª–æ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=language_keyboard())
    await LanguageCity.choosing_language.set()

@bot.message_handler(state=LanguageCity.choosing_language)
async def language_chosen(message: types.Message, state: FSMContext):
    if message.text.lower() not in ["—É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶", "—Ä—É—Å—Å–∫–∏–π üá∑üá∫"]:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –∫–Ω–æ–ø–∫–∞–º–∏.")
        return
    lang = "uk" if "—É–∫—Ä–∞—ó–Ω—Å—å–∫–∞" in message.text.lower() else "ru"
    await state.update_data(language=lang)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∞—à–µ –º—ñ—Å—Ç–æ:", reply_markup=types.ReplyKeyboardRemove())
    await LanguageCity.entering_city.set()

@bot.message_handler(state=LanguageCity.entering_city)
async def city_entered(message: types.Message, state: FSMContext):
    city = message.text.strip()
    data = await state.get_data()
    language = data.get("language")
    # –ó–±–µ—Ä–µ–∂–∏ –º–æ–≤—É —Ç–∞ –º—ñ—Å—Ç–æ –≤ –±–∞–∑—É (–ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—Ä–æ–±–∏—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é save_user_language_city)
    from db.database import save_user_language_city
    await save_user_language_city(user_id=message.from_user.id, language=language, city=city)

    if language == "uk":
        await message.answer(f"–î—è–∫—É—é! –û–±—Ä–∞–Ω–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –º–æ–≤—É, –º—ñ—Å—Ç–æ: {city}")
        await message.answer("–¢–µ–ø–µ—Ä —Å—Ç–≤–æ—Ä–∏–º–æ —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É.")
    else:
        await message.answer(f"–°–ø–∞—Å–∏–±–æ! –í—ã–±—Ä–∞–ª–∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫, –≥–æ—Ä–æ–¥: {city}")
        await message.answer("–¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–¥–∏–º —Ç–≤–æ—ë –∞–Ω–∫–µ—Ç—É.")

    await state.finish()
    # –ó–∞–ø—É—Å—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∞–Ω–∫–µ—Ç–∏
    from handlers.registration import cmd_start
    await cmd_start(message)

def register_handlers_language_city(dp: Dispatcher):
    dp.register_message_handler(start_language_choice, commands=["start"], state="*")
    dp.register_message_handler(language_chosen, state=LanguageCity.choosing_language)
    dp.register_message_handler(city_entered, state=LanguageCity.entering_city)
