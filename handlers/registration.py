from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, ContentType, InlineKeyboardMarkup, InlineKeyboardButton
from db.database import add_user_with_photo
from config import ADMIN_CHAT_ID
from loader import bot

class Registration(StatesGroup):
    waiting_for_language = State()
    waiting_for_name = State()
    waiting_for_age = State()
    waiting_for_city = State()
    waiting_for_preferences = State()
    waiting_for_photo = State()
    waiting_for_phone = State()
    waiting_for_video = State()

async def cmd_start(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.add("–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶", "–†—É—Å—Å–∫–∏–π üá∑üá∫")
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=keyboard)
    await Registration.waiting_for_language.set()

async def process_language(message: types.Message, state: FSMContext):
    language = message.text
    if language not in ["–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶", "–†—É—Å—Å–∫–∏–π üá∑üá∫"]:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö –º–æ–≤.")
        return
    lang_code = "uk" if "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞" in language else "ru"
    await state.update_data(language=lang_code)
    if lang_code == "uk":
        await message.answer("–Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?", reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=ReplyKeyboardRemove())
    await Registration.waiting_for_name.set()

async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    data = await state.get_data()
    lang = data.get('language', 'uk')
    if lang == "uk":
        await message.answer("–°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤?")
    else:
        await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    await Registration.waiting_for_age.set()

async def process_age(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        data = await state.get_data()
        lang = data.get('language', 'uk')
        if lang == "uk":
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ —Å–≤—ñ–π –≤—ñ–∫ —Ü–∏—Ñ—Ä–∞–º–∏.")
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏.")
        return
    await state.update_data(age=int(message.text))
    data = await state.get_data()
    lang = data.get('language', 'uk')
    if lang == "uk":
        await message.answer("–ó —è–∫–æ–≥–æ —Ç–∏ –º—ñ—Å—Ç–∞?")
    else:
        await message.answer("–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?")
    await Registration.waiting_for_city.set()

async def process_city(message: types.Message, state: FSMContext):
    city = message.text.strip()
    if not city:
        data = await state.get_data()
        lang = data.get('language', 'uk')
        if lang == "uk":
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞.")
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")
        return
    await state.update_data(city=city)
    data = await state.get_data()
    lang = data.get('language', 'uk')
    if lang == "uk":
        await message.answer("–û–ø–∏—à–∏ —Å–≤–æ—ó –≤–ø–æ–¥–æ–±–∞–Ω–Ω—è (—Ö–µ—à—Ç–µ–≥–∏, —Ñ–µ—Ç–∏—à—ñ —Ç–æ—â–æ).")
    else:
        await message.answer("–û–ø–∏—à–∏ —Å–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è (—Ö–µ—à—Ç–µ–≥–∏, —Ñ–µ—Ç–∏—à–∏ –∏ —Ç.–¥.).")
    await Registration.waiting_for_preferences.set()

async def process_preferences(message: types.Message, state: FSMContext):
    await state.update_data(preferences=message.text)
    data = await state.get_data()
    lang = data.get('language', 'uk')
    if lang == "uk":
        await message.answer("–ù–∞–¥—ñ—à–ª–∏ —Å–≤–æ—î —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ—ñ–ª—é.")
    else:
        await message.answer("–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è.")
    await Registration.waiting_for_photo.set()

async def process_photo(message: types.Message, state: FSMContext):
    if not message.photo:
        data = await state.get_data()
        lang = data.get('language', 'uk')
        if lang == "uk":
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é.")
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")
        return
    photo_id = message.photo[-1].file_id
    await state.update_data(photo_id=photo_id)

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(KeyboardButton("üìû –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –º—ñ–π –Ω–æ–º–µ—Ä", request_contact=True))
    data = await state.get_data()
    lang = data.get('language', 'uk')
    if lang == "uk":
        await message.answer("–ù–∞–¥—ñ—à–ª–∏ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.", reply_markup=keyboard)
    else:
        await message.answer("–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.", reply_markup=keyboard)
    await Registration.waiting_for_phone.set()

async def process_phone(message: types.Message, state: FSMContext):
    if not message.contact:
        data = await state.get_data()
        lang = data.get('language', 'uk')
        if lang == "uk":
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É, —â–æ–± –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä.")
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä.")
        return
    phone = message.contact.phone_number
    await state.update_data(phone=phone)
    data = await state.get_data()
    lang = data.get('language', 'uk')
    if lang == "uk":
        await message.answer("–¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª–∏ –∫–æ—Ä–æ—Ç–∫–µ –≤—ñ–¥–µ–æ –∑ —Ñ—Ä–∞–∑–æ—é '–ü—Ä–∏–≤—ñ—Ç –ö—ñ–Ω–∫—ñ' –¥–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó.")
    else:
        await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ —Å —Ñ—Ä–∞–∑–æ–π '–ü—Ä–∏–≤–µ—Ç –ö–∏–Ω–∫–∏' –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.")
    await Registration.waiting_for_video.set()

async def process_video(message: types.Message, state: FSMContext):
    if message.content_type not in [ContentType.VIDEO, ContentType.VIDEO_NOTE]:
        data = await state.get_data()
        lang = data.get('language', 'uk')
        if lang == "uk":
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ –≤—ñ–¥–µ–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return
    video_id = message.video.file_id if message.content_type == ContentType.VIDEO else message.video_note.file_id
    await state.update_data(video_id=video_id)

    await save_and_send_to_admin(message, state)

async def save_and_send_to_admin(message: types.Message, state: FSMContext):
    data = await state.get_data()
    try:
        await add_user_with_photo(
            user_id=message.from_user.id,
            name=data['name'],
            age=data['age'],
            city=data.get('city', ''),
            preferences=data['preferences'],
            photo_id=data['photo_id'],
            phone=data.get('phone'),
            language=data.get('language', 'uk')
        )
    except Exception as e:
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∞–Ω–∫–µ—Ç–∏ –∞–¥–º—ñ–Ω—É.")
        import logging
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—É: {e}")
        await state.finish()
        return

    username = message.from_user.username or "(–Ω–µ–º–∞—î username)"
    lang = data.get('language', 'uk')

    caption = (
        f"–ù–æ–≤–∞ –∞–Ω–∫–µ—Ç–∞ –¥–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó:\n"
        f"–ú–æ–≤–∞: {lang}\n"
        f"–Ü–º'—è: {data['name']}\n"
        f"–í—ñ–∫: {data['age']}\n"
        f"–ú—ñ—Å—Ç–æ: {data.get('city', '')}\n"
        f"–í–ø–æ–¥–æ–±–∞–Ω–Ω—è: {data['preferences']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone', '–ù–µ –Ω–∞–¥–∞–Ω–æ')}\n"
        f"Username: @{username}"
    )

    keyboard = InlineKeyboardMarkup(row_width=3)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –í–µ—Ä–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏", callback_data=f"verify:{message.from_user.id}"),
        InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject:{message.from_user.id}"),
        InlineKeyboardButton("üîÑ –ó–∞–ø–∏—Ç–∞—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–µ –≤—ñ–¥–µ–æ", callback_data=f"repeat_video:{message.from_user.id}")
    )

    try:
        await bot.send_photo(chat_id=ADMIN_CHAT_ID, photo=data['photo_id'], caption=caption, reply_markup=keyboard)
        if 'video_id' in data:
            await bot.send_video(chat_id=ADMIN_CHAT_ID, video=data['video_id'], caption=f"–í—ñ–¥–µ–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {data['name']}")
    except Exception as e:
        await message.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∞–¥–º—ñ–Ω—É.")
        import logging
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∞–¥–º—ñ–Ω—É: {e}")
        await state.finish()
        return

    if lang == "uk":
        await message.answer("–ê–Ω–∫–µ—Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –∞–¥–º—ñ–Ω—É. –û—á—ñ–∫—É–π –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.")
    else:
        await message.answer("–ê–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    await state.finish()

def register_handlers_registration(dp: Dispatcher):
    dp.register_message_handler(cmd_start, commands=["start"], state="*")
    dp.register_message_handler(process_language, state=Registration.waiting_for_language)
    dp.register_message_handler(process_name, state=Registration.waiting_for_name)
    dp.register_message_handler(process_age, state=Registration.waiting_for_age)
    dp.register_message_handler(process_city, state=Registration.waiting_for_city)
    dp.register_message_handler(process_preferences, state=Registration.waiting_for_preferences)
    dp.register_message_handler(process_photo, content_types=types.ContentType.PHOTO, state=Registration.waiting_for_photo)
    dp.register_message_handler(process_phone, content_types=[types.ContentType.CONTACT], state=Registration.waiting_for_phone)
    dp.register_message_handler(process_video, content_types=[ContentType.VIDEO, ContentType.VIDEO_NOTE], state=Registration.waiting_for_video)
